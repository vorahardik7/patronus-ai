"use client";

import { useState, useRef } from 'react';

interface MeetingMetadata {
  doctorName: string;
  repName: string;
  drugsDiscussed: string; // Drugs or devices discussed
  generatedTitle?: string; // Generated by GPT-4o
  generatedTags?: string[]; // Generated by GPT-4o
  keyPoints?: string[]; // Key points extracted from transcript
}

export default function RecordInterface() {
  const [isRecording, setIsRecording] = useState(false);
  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
  const [audioURL, setAudioURL] = useState('');
  const [rawTranscript, setRawTranscript] = useState('');
  const [displayTranscript, setDisplayTranscript] = useState('');
  const [processingStatus, setProcessingStatus] = useState<'idle' | 'recording' | 'transcribing' | 'analyzing' | 'saving' | 'done' | 'error'>('idle');
  const [error, setError] = useState<string | null>(null);
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState<MeetingMetadata>({
    doctorName: '',
    repName: '',
    drugsDiscussed: '',
    generatedTitle: undefined,
    generatedTags: [],
  });

  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);

  // Function to handle transcription using the API
  const transcribeAudio = async (audioBlob: Blob) => {
    try {
      setError(null);
      setProcessingStatus('transcribing');
      setShowForm(false);
      setRawTranscript('');
      setDisplayTranscript('');

      const formPayload = new FormData();
      formPayload.append('file', audioBlob, 'recording.wav');

      const response = await fetch('/api/transcribe', {
        method: 'POST',
        body: formPayload,
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`Transcription failed: ${response.statusText} ${errorData.error || ''}`);
      }

      const data = await response.json();
      setRawTranscript(data.text || 'Transcription finished, but no text was returned.'); 
      
      // Automatically analyze the transcript with GPT-4o
      if (data.text) {
        await analyzeTranscript(data.text);
      }
      
      setProcessingStatus('done'); 
      setShowForm(true); 
      setError(null);
    } catch (err) {
      console.error('Transcription error:', err);
      const message = err instanceof Error ? err.message : 'Unknown transcription error';
      setError(`Failed to transcribe audio. ${message}. Please try recording again.`);
      setProcessingStatus('error');
      setShowForm(false);
      setRawTranscript('');
    }
  };

  // Function to analyze transcript with GPT-4o
  const analyzeTranscript = async (transcriptText: string) => {
    if (!transcriptText) {
      setError('No transcript available to analyze');
      return;
    }

    try {
      setProcessingStatus('analyzing');
      setError(null);

      const response = await fetch('/api/analyze-transcript', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ transcript: transcriptText }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`Analysis failed: ${response.statusText} ${errorData.error || ''}`);
      }

      const data = await response.json();
      
      setFormData(prev => ({
        ...prev,
        generatedTitle: data.title || 'Untitled Meeting',
        generatedTags: Array.isArray(data.tags) ? data.tags : [],
        keyPoints: Array.isArray(data.keyPoints) ? data.keyPoints : [],
      }));

      setProcessingStatus('done');
    } catch (err) {
      console.error('Analysis error:', err);
      const message = err instanceof Error ? err.message : 'Unknown analysis error';
      setError(`Failed to analyze transcript. ${message}. You can still save the meeting.`);
      setProcessingStatus('done'); // Still allow saving
    }
  };

  const startRecording = async () => {
    try {
      setError(null);
      setShowForm(false);
      setRawTranscript('');
      setDisplayTranscript('');
      audioChunksRef.current = [];
      setAudioURL('');

      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });

      mediaRecorderRef.current = mediaRecorder;
      setIsRecording(true);
      setProcessingStatus('recording');

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        const mimeType = mediaRecorderRef.current?.mimeType || 'audio/webm';
        const newAudioBlob = new Blob(audioChunksRef.current, { type: mimeType });
        const audioUrl = URL.createObjectURL(newAudioBlob);
        setAudioBlob(newAudioBlob);
        setAudioURL(audioUrl);

        transcribeAudio(newAudioBlob);
      };

      mediaRecorder.stream.getTracks().forEach(track => {
        mediaRecorder.addEventListener('stop', () => track.stop());
      });
      
      mediaRecorder.start(200);
    } catch (error) {
      console.error('Error starting recording:', error);
      setError('Could not access microphone. Please ensure permission is granted and no other app is using it.');
      setProcessingStatus('error');
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'number' ? (value === '' ? undefined : Number(value)) : value,
    }));
  };

  const handleSaveMeeting = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!rawTranscript) {
      setError('Cannot save, transcription data is missing.');
      return;
    }
    
    setProcessingStatus('saving');
    setError(null);

    try {
      // Convert audio blob to base64 for sending to the server
      let audioData = null;
      if (audioBlob) {
        const reader = new FileReader();
        audioData = await new Promise((resolve) => {
          reader.onloadend = () => resolve(reader.result);
          reader.readAsDataURL(audioBlob);
        });
      }

      const payload = {
        transcript: rawTranscript,
        metadata: formData,
        audioUrl: audioData || audioURL, // Send base64 data if available, otherwise URL
      };
      
      console.log("Sending to /api/save-meeting...");

      const response = await fetch('/api/save-meeting', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`Failed to save meeting: ${response.statusText} ${errorData.error || ''}`);
      }

      const result = await response.json();
      console.log('Save successful:', result);
      setDisplayTranscript(rawTranscript);
      setProcessingStatus('done');
      setShowForm(false);
      alert('Meeting saved successfully!');
    } catch (err) {
      console.error('Error saving meeting:', err);
      const message = err instanceof Error ? err.message : 'Unknown saving error';
      setError(`Failed to save meeting. ${message}. Please try again.`);
      setProcessingStatus('error');
    }
  };

  // Helper to render form fields
  const renderFormField = (name: keyof MeetingMetadata, label: string, type: string = 'text', required: boolean = false) => (
    <div className="mb-4">
      <label htmlFor={name} className="block text-sm font-medium text-gray-700 mb-1">{label}{required && ' *'}</label>
      {type === 'textarea' ? (
        <textarea
          id={name}
          name={name}
          rows={3}
          value={formData[name] as string || ''}
          onChange={handleInputChange}
          required={required}
          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
        />
      ) : (
        <input
          type={type}
          id={name}
          name={name}
          value={formData[name] === undefined ? '' : formData[name]}
          onChange={handleInputChange}
          required={required}
          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          min={type === 'number' ? 0 : undefined}
        />
      )}
    </div>
  );
  
  return (
    <div>
      <div className="bg-white rounded-lg overflow-hidden">
        {/* Header Section */}
        <div className="bg-gradient-to-r from-primary-600 to-primary-800 px-6 py-5">
          <h1 className="text-2xl font-bold text-white">Patronus AI</h1>
          <p className="text-primary-100 mt-1">Record and analyze PSR interactions</p>
        </div>
        
        <div className="p-6 sm:p-8">
          {/* Status Indicator */}
          <div className="mb-8 flex items-center justify-center">
            <div className={`
              inline-flex items-center px-4 py-2 rounded-full text-sm font-medium
              ${processingStatus === 'idle' ? 'bg-secondary-100 text-secondary-800' :
                processingStatus === 'recording' ? 'bg-red-100 text-red-800 animate-pulse' :
                processingStatus === 'transcribing' ? 'bg-amber-100 text-amber-800' :
                processingStatus === 'analyzing' ? 'bg-primary-100 text-primary-800' :
                processingStatus === 'saving' ? 'bg-primary-100 text-primary-800' :
                processingStatus === 'done' ? 'bg-emerald-100 text-emerald-800' :
                'bg-red-100 text-red-800'}
            `}>
              <span className="mr-2">
                {processingStatus === 'idle' && '🎙️'}
                {processingStatus === 'recording' && '🔴'}
                {processingStatus === 'transcribing' && '⏳'}
                {processingStatus === 'analyzing' && '🔍'}
                {processingStatus === 'saving' && '💾'}
                {processingStatus === 'done' && '✅'}
                {processingStatus === 'error' && '❌'}
              </span>
              <span>
                {processingStatus === 'idle' && 'Ready to record'}
                {processingStatus === 'recording' && 'Recording in progress'}
                {processingStatus === 'transcribing' && 'Transcribing audio'}
                {processingStatus === 'analyzing' && 'Analyzing transcript'}
                {processingStatus === 'saving' && 'Saving meeting details'}
                {processingStatus === 'done' && 'Complete'}
                {processingStatus === 'error' && 'Error'}
              </span>
            </div>
          </div>

          {/* Error Display */}
          {error && (
            <div className="mb-6 p-4 border-l-4 border-red-500 bg-red-50 rounded-md">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className="text-sm text-red-700">{error}</p>
                </div>
              </div>
            </div>
          )}

          {/* Recording Button Section */}
          {!showForm && (
            <div className="mb-8 flex flex-col items-center justify-center">
              <button
                onClick={isRecording ? stopRecording : startRecording}
                disabled={processingStatus === 'transcribing' || processingStatus === 'analyzing' || processingStatus === 'saving'}
                className={`
                  w-24 h-24 rounded-full flex items-center justify-center shadow-lg
                  ${isRecording 
                    ? 'bg-red-600 hover:bg-red-700 animate-pulse' 
                    : 'bg-primary-600 hover:bg-primary-700'}
                  transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-offset-2
                  ${isRecording ? 'focus:ring-red-500' : 'focus:ring-primary-500'}
                  disabled:opacity-50 disabled:cursor-not-allowed
                `}
                aria-label={isRecording ? 'Stop recording' : 'Start recording'}
              >
                {isRecording ? (
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-white" viewBox="0 0 24 24" fill="currentColor">
                    <rect x="6" y="6" width="12" height="12" rx="1" />
                  </svg>
                ) : (
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-white" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z"/>
                    <path d="M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z"/>
                  </svg>
                )}
              </button>
              <p className="mt-4 text-sm font-medium text-gray-600">
                {isRecording ? 'Click to stop recording' : 'Click to start recording'}
              </p>
            </div>
          )}

          {/* Audio Playback (when available and not in form) */}
          {audioURL && !showForm && (
            <div className="mb-8 p-5 bg-gray-50 rounded-lg border border-gray-200">
              <h3 className="text-lg font-medium text-gray-900 mb-3">Recorded Audio</h3>
              <audio className="w-full" controls src={audioURL}></audio>
            </div>
          )}

          {/* Two-Column Layout for Form and Transcript */}
          {showForm && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Left Column - Form */}
              <form onSubmit={handleSaveMeeting} className="bg-white rounded-lg border border-indigo-100 overflow-hidden h-fit">
                <div className="bg-indigo-50 px-6 py-4 border-b border-indigo-100">
                  <h3 className="text-lg font-medium text-indigo-900">Meeting Details</h3>
                  <p className="mt-1 text-sm text-indigo-700">Enter the basic information below</p>
                </div>
                
                <div className="p-6">
                  {/* Simplified Form Fields */}
                  <div className="space-y-4">
                    {renderFormField('doctorName', 'Your Name (Doctor)', 'text', true)}
                    {renderFormField('repName', 'Medical Rep Name', 'text', true)}
                    {renderFormField('drugsDiscussed', 'Drugs/Devices Discussed', 'text', true)}
                    
                    {/* Generated Title Display */}
                    {formData.generatedTitle && (
                      <div className="mt-4 p-3 bg-indigo-50 rounded-md">
                        <h4 className="text-sm font-medium text-indigo-800 mb-1">Generated Title</h4>
                        <p className="text-indigo-900 font-medium">{formData.generatedTitle}</p>
                      </div>
                    )}
                    
                    {/* Generated Tags Display */}
                    {formData.generatedTags && formData.generatedTags.length > 0 && (
                      <div className="mt-4">
                        <h4 className="text-sm font-medium text-gray-700 mb-2">Generated Tags</h4>
                        <div className="flex flex-wrap gap-2">
                          {formData.generatedTags.map((tag, index) => (
                            <span key={index} className="px-2 py-1 bg-indigo-100 text-indigo-800 text-xs rounded-full">
                              {tag}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {/* Audio Playback */}
                    {audioURL && (
                      <div className="mt-6">
                        <h4 className="text-sm font-medium text-gray-700 mb-2">Recorded Audio</h4>
                        <audio className="w-full" controls src={audioURL}></audio>
                      </div>
                    )}
                  </div>

                  {/* AI Analysis Status */}
                  {processingStatus === 'analyzing' && (
                    <div className="mt-6 p-3 bg-blue-50 rounded-md flex items-center">
                      <svg className="animate-spin h-5 w-5 mr-3 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      <span className="text-blue-700">Analyzing transcript with AI...</span>
                    </div>
                  )}

                  {/* Submit Button */}
                  <div className="mt-4">
                    <button 
                      type="submit"
                      disabled={processingStatus === 'saving' || !rawTranscript}
                      className="w-full px-6 py-3 bg-primary-600 text-white rounded-md hover:bg-primary-700 
                               focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 
                               disabled:opacity-50 disabled:cursor-not-allowed
                               transition-colors duration-200 font-medium flex items-center justify-center"
                    >
                      {processingStatus === 'saving' ? (
                        <span className="flex items-center">
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Saving...
                        </span>
                      ) : 'Save Meeting'}
                    </button>
                  </div>
                </div>
              </form>

              {/* Right Column - Transcript */}
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
                  <h3 className="text-lg font-medium text-gray-900">Transcript</h3>
                  <p className="mt-1 text-sm text-gray-600">Complete transcript of the recorded conversation</p>
                </div>
                
                <div className="p-6">
                  <div className="rounded-md border border-gray-200 bg-white min-h-[400px] max-h-[600px] overflow-y-auto">
                    {rawTranscript ? (
                      <div className="p-4">
                        <p className="whitespace-pre-line text-gray-700 text-sm leading-relaxed">{rawTranscript}</p>
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-full">
                        <p className="text-gray-400 italic">Transcript will appear here after recording</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Display Final Transcript After Save */}
          {displayTranscript && processingStatus === 'done' && !showForm && (
            <div className="mt-8 p-5 rounded-lg border border-green-200 bg-green-50">
              <div className="flex items-center mb-3">
                <svg className="h-5 w-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <h3 className="text-lg font-medium text-green-800">Meeting Saved Successfully</h3>
              </div>
              <div className="bg-white p-4 rounded border border-green-100">
                <h4 className="text-md font-medium text-gray-900 mb-2">Transcript</h4>
                <p className="whitespace-pre-line text-sm text-gray-700">{displayTranscript}</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
